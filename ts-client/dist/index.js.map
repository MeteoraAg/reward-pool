{"version":3,"sources":["../src/farm.ts","../src/utils.ts","../src/farming-idl.ts"],"names":["EventParser","TOKEN_PROGRAM_ID","PublicKey"],"mappings":"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","sourcesContent":["import { BN, EventParser } from \"@coral-xyz/anchor\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport {\n  Cluster,\n  ComputeBudgetProgram,\n  Connection,\n  PublicKey,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\n\nimport { FarmProgram, Opt, PoolState, UserState } from \"./types\";\nimport {\n  FARM_PROGRAM_ID,\n  SIMULATION_USER,\n  chunks,\n  getFarmProgram,\n  getOrCreateATAInstruction,\n  parseLogs,\n} from \"./utils\";\n\nconst chunkedFetchMultipleUserAccount = async (\n  program: FarmProgram,\n  pks: PublicKey[],\n  chunkSize: number = 100\n) => {\n  const accounts = (\n    await Promise.all(\n      chunks(pks, chunkSize).map((chunk) =>\n        program.account.user.fetchMultiple(chunk)\n      )\n    )\n  ).flat();\n\n  return accounts.filter(Boolean);\n};\n\nconst chunkedFetchMultiplePoolAccount = async (\n  program: FarmProgram,\n  pks: PublicKey[],\n  chunkSize: number = 100\n) => {\n  const accounts = (\n    await Promise.all(\n      chunks(pks, chunkSize).map((chunk) =>\n        program.account.pool.fetchMultiple(chunk)\n      )\n    )\n  ).flat();\n\n  return accounts.filter(Boolean);\n};\n\nconst getAllPoolState = async (\n  farmMints: Array<PublicKey>,\n  program: FarmProgram\n) => {\n  const poolStates = (await chunkedFetchMultiplePoolAccount(\n    program,\n    farmMints\n  )) as Array<PoolState>;\n\n  return poolStates;\n};\n\nconst MAX_CLAIM_ALL_ALLOWED = 2;\n\nexport class PoolFarmImpl {\n  private opt: Opt = {\n    cluster: \"mainnet-beta\",\n  };\n\n  private constructor(\n    public address: PublicKey,\n    private program: FarmProgram,\n    private eventParser: EventParser,\n    public poolState: PoolState,\n    opt: Opt\n  ) {\n    this.opt = opt;\n  }\n\n  public static async createMultiple(\n    connection: Connection,\n    farmList: Array<PublicKey>,\n    opt?: {\n      cluster?: Cluster;\n    }\n  ) {\n    const cluster = opt?.cluster ?? \"mainnet-beta\";\n    const { program } = getFarmProgram(connection);\n    const eventParser = new EventParser(FARM_PROGRAM_ID, program.coder);\n\n    const poolsState = await getAllPoolState(farmList, program);\n\n    return poolsState.map((poolState, idx) => {\n      const address = farmList[idx];\n      return new PoolFarmImpl(address, program, eventParser, poolState, {\n        cluster,\n      });\n    });\n  }\n\n  public static async getUserBalances(\n    connection: Connection,\n    owner: PublicKey,\n    farmMints: Array<PublicKey>\n  ) {\n    const { program } = getFarmProgram(connection);\n\n    const userStakingPda = farmMints.map((mint) => {\n      const [userStakingAddress] = PublicKey.findProgramAddressSync(\n        [owner.toBuffer(), mint.toBuffer()],\n        FARM_PROGRAM_ID\n      );\n\n      return userStakingAddress;\n    });\n\n    const usersState = (await chunkedFetchMultipleUserAccount(\n      program,\n      userStakingPda,\n      100\n    )) as Array<UserState>;\n    return usersState.reduce((acc, userState) => {\n      const userStaked = userState.balanceStaked;\n      if (userStaked.isZero()) return acc;\n      acc.set(userState.pool.toBase58(), userStaked);\n      return acc;\n    }, new Map<string, BN>());\n  }\n\n  public static async claimAll(\n    connection: Connection,\n    owner: PublicKey,\n    farmMints: Array<PublicKey>,\n    opt?: {\n      cluster?: Cluster;\n    }\n  ) {\n    const { program } = getFarmProgram(connection);\n\n    const userBalanceMap = await PoolFarmImpl.getUserBalances(\n      connection,\n      owner,\n      farmMints\n    );\n    const farmMintWithBalance = Array.from(userBalanceMap.keys()).map(\n      (farmMint) => new PublicKey(farmMint)\n    );\n\n    const poolFarmsImpl = await PoolFarmImpl.createMultiple(\n      connection,\n      farmMintWithBalance,\n      { cluster: opt?.cluster }\n    );\n\n    const claimAllIxs = await Promise.all(\n      poolFarmsImpl.map(async (poolFarmImpl) => {\n        return (await poolFarmImpl.claimMethodBuilder(owner)).instruction();\n      })\n    );\n\n    const chunkedClaimAllIx = chunks(claimAllIxs, MAX_CLAIM_ALL_ALLOWED);\n\n    return Promise.all(\n      chunkedClaimAllIx.map(async (claimAllIx) => {\n        return new Transaction({\n          feePayer: owner,\n          ...(await program.provider.connection.getLatestBlockhash(\n            \"finalized\"\n          )),\n        })\n          .add(...claimAllIx)\n          .add(ComputeBudgetProgram.setComputeUnitLimit({ units: 1_400_000 }));\n      })\n    );\n  }\n\n  getUserPda(owner: PublicKey) {\n    const [userPda] = PublicKey.findProgramAddressSync(\n      [owner.toBuffer(), this.address.toBuffer()],\n      this.program.programId\n    );\n\n    return userPda;\n  }\n\n  async getUserState(owner: PublicKey) {\n    const userPda = this.getUserPda(owner);\n\n    return this.program.account.user.fetchNullable(owner);\n  }\n\n  private async createUserInstruction(owner: PublicKey) {\n    const userPda = this.getUserPda(owner);\n\n    const userState = await this.getUserState(userPda);\n\n    if (userState) return undefined;\n\n    return await this.program.methods\n      .createUser()\n      .accounts({\n        owner,\n        pool: this.address,\n        user: userPda,\n      })\n      .instruction();\n  }\n\n  public async deposit(owner: PublicKey, amount: BN) {\n    const userPda = this.getUserPda(owner);\n\n    const instructions: TransactionInstruction[] = [];\n\n    const userCreateInstruction = await this.createUserInstruction(owner);\n    userCreateInstruction && instructions.push(userCreateInstruction);\n\n    const [userStakingATA, userStakingIx] = await getOrCreateATAInstruction(\n      this.poolState.stakingMint,\n      owner,\n      this.program.provider.connection\n    );\n    userStakingIx && instructions.push(userStakingIx);\n\n    const depositTx = await this.program.methods\n      .deposit(amount)\n      .accounts({\n        owner,\n        user: userPda,\n        pool: this.address,\n        stakeFromAccount: userStakingATA,\n        stakingVault: this.poolState.stakingVault,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      })\n      .preInstructions(instructions)\n      .transaction();\n\n    return new Transaction({\n      feePayer: owner,\n      ...(await this.program.provider.connection.getLatestBlockhash(\n        \"finalized\"\n      )),\n    }).add(depositTx);\n  }\n\n  public async withdraw(owner: PublicKey, amount: BN) {\n    const userPda = this.getUserPda(owner);\n\n    const instructions: TransactionInstruction[] = [];\n    const [userStakingATA, userStakingIx] = await getOrCreateATAInstruction(\n      this.poolState.stakingMint,\n      owner,\n      this.program.provider.connection\n    );\n    userStakingIx && instructions.push(userStakingIx);\n\n    const withdrawTx = await this.program.methods\n      .withdraw(amount)\n      .accounts({\n        owner,\n        pool: this.address,\n        stakeFromAccount: userStakingATA,\n        stakingVault: this.poolState.stakingVault,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        user: userPda,\n      })\n      .preInstructions(instructions)\n      .transaction();\n\n    return new Transaction({\n      feePayer: owner,\n      ...(await this.program.provider.connection.getLatestBlockhash(\n        \"finalized\"\n      )),\n    }).add(withdrawTx);\n  }\n\n  private async claimMethodBuilder(owner: PublicKey) {\n    const userPda = this.getUserPda(owner);\n\n    const isDual = !this.poolState.rewardAMint.equals(\n      this.poolState.rewardBMint\n    );\n\n    const preInstructions: TransactionInstruction[] = [];\n\n    const [[userRewardAATA, userRewardAIx], [userRewardBATA, userRewardBIx]] =\n      await Promise.all(\n        isDual\n          ? [\n              getOrCreateATAInstruction(\n                this.poolState.rewardAMint,\n                owner,\n                this.program.provider.connection\n              ),\n              getOrCreateATAInstruction(\n                this.poolState.rewardBMint,\n                owner,\n                this.program.provider.connection\n              ),\n            ]\n          : [\n              getOrCreateATAInstruction(\n                this.poolState.rewardAMint,\n                owner,\n                this.program.provider.connection\n              ),\n              [undefined, undefined],\n            ]\n      );\n    userRewardAIx && preInstructions.push(userRewardAIx);\n    userRewardBIx && preInstructions.push(userRewardBIx);\n\n    return this.program.methods\n      .claim()\n      .accounts({\n        owner,\n        pool: this.address,\n        rewardAAccount: userRewardAATA,\n        rewardBAccount: isDual ? userRewardBATA : userRewardAATA,\n        rewardAVault: this.poolState.rewardAVault,\n        rewardBVault: this.poolState.rewardBVault,\n        stakingVault: this.poolState.stakingVault,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        user: userPda,\n      })\n      .preInstructions(preInstructions);\n  }\n\n  public async claim(owner: PublicKey) {\n    const claimTx = await (await this.claimMethodBuilder(owner)).transaction();\n\n    return new Transaction({\n      feePayer: owner,\n      ...(await this.program.provider.connection.getLatestBlockhash(\n        \"finalized\"\n      )),\n    }).add(claimTx);\n  }\n\n  async getClaimableReward(owner: PublicKey) {\n    if (!this.eventParser) throw \"EventParser not found\";\n\n    const claimMethodBuilder = await this.claimMethodBuilder(owner);\n\n    const claimTransaction = await claimMethodBuilder.transaction();\n\n    if (!claimTransaction) return;\n\n    const blockhash = (\n      await this.program.provider.connection.getLatestBlockhash(\"finalized\")\n    ).blockhash;\n    const claimTx = new Transaction({\n      recentBlockhash: blockhash,\n      feePayer: SIMULATION_USER,\n    });\n    claimTransaction && claimTx.add(claimTransaction);\n\n    const tx = await this.program.provider.connection.simulateTransaction(\n      claimTx\n    );\n\n    const simulatedReward = (await parseLogs(\n      this.eventParser,\n      tx?.value?.logs ?? []\n    )) as { amountA: BN; amountB: BN };\n\n    return simulatedReward;\n  }\n}\n","import { AnchorProvider, EventParser, Program } from \"@coral-xyz/anchor\";\nimport { Connection, PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n  Token,\n} from \"@solana/spl-token\";\n\nimport { Farming, IDL } from \"./farming-idl\";\n\nexport const FARM_PROGRAM_ID = new PublicKey(\n  \"FarmuwXPWXvefWUeqFAa5w6rifLkq5X6E8bimYvrhCB1\"\n);\n\nexport const getFarmProgram = (connection: Connection) => {\n  const provider = new AnchorProvider(\n    connection,\n    {} as any,\n    AnchorProvider.defaultOptions()\n  );\n  const program = new Program<Farming>(IDL, FARM_PROGRAM_ID, provider);\n\n  return { provider, program };\n};\n\nexport const SIMULATION_USER = new PublicKey(\n  \"HrY9qR5TiB2xPzzvbBu5KrBorMfYGQXh9osXydz4jy9s\"\n);\n\nexport const parseLogs = <T>(eventParser: EventParser, logs: string[]) => {\n  if (!logs.length) throw new Error(\"No logs found\");\n\n  for (const event of eventParser?.parseLogs(logs)) {\n    return event.data as T;\n  }\n\n  throw new Error(\"No events found\");\n};\n\nexport const getOrCreateATAInstruction = async (\n  tokenMint: PublicKey,\n  owner: PublicKey,\n  connection: Connection\n): Promise<[PublicKey, TransactionInstruction?]> => {\n  let toAccount;\n  try {\n    toAccount = await Token.getAssociatedTokenAddress(\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n      TOKEN_PROGRAM_ID,\n      tokenMint,\n      owner\n    );\n    const account = await connection.getAccountInfo(toAccount);\n    if (!account) {\n      const ix = Token.createAssociatedTokenAccountInstruction(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        tokenMint,\n        toAccount,\n        owner,\n        owner\n      );\n      return [toAccount, ix];\n    }\n    return [toAccount, undefined];\n  } catch (e) {\n    /* handle error */\n    console.error(\"Error::getOrCreateATAInstruction\", e);\n    throw e;\n  }\n};\n\nexport function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply(0, new Array(Math.ceil(array.length / size))).map(\n    (_, index) => array.slice(index * size, (index + 1) * size)\n  );\n}\n","export type Farming = {\n  version: '0.2.0';\n  name: 'farming';\n  instructions: [\n    {\n      name: 'initializePool';\n      accounts: [\n        {\n          name: 'pool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'stakingMint';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'stakingVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'rewardAMint';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'rewardAVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'rewardBMint';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'rewardBVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'base';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'rent';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'rewardDuration';\n          type: 'u64';\n        },\n      ];\n    },\n    {\n      name: 'createUser';\n      accounts: [\n        {\n          name: 'pool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'user';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'owner';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'pause';\n      accounts: [\n        {\n          name: 'pool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: true;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'unpause';\n      accounts: [\n        {\n          name: 'pool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: true;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'deposit';\n      accounts: [\n        {\n          name: 'pool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'stakingVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'user';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'owner';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'stakeFromAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'amount';\n          type: 'u64';\n        },\n      ];\n    },\n    {\n      name: 'withdraw';\n      accounts: [\n        {\n          name: 'pool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'stakingVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'user';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'owner';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'stakeFromAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'sptAmount';\n          type: 'u64';\n        },\n      ];\n    },\n    {\n      name: 'authorizeFunder';\n      accounts: [\n        {\n          name: 'pool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: true;\n        },\n      ];\n      args: [\n        {\n          name: 'funderToAdd';\n          type: 'publicKey';\n        },\n      ];\n    },\n    {\n      name: 'deauthorizeFunder';\n      accounts: [\n        {\n          name: 'pool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: true;\n        },\n      ];\n      args: [\n        {\n          name: 'funderToRemove';\n          type: 'publicKey';\n        },\n      ];\n    },\n    {\n      name: 'fund';\n      accounts: [\n        {\n          name: 'pool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'stakingVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'rewardAVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'rewardBVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'funder';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'fromA';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'fromB';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'amountA';\n          type: 'u64';\n        },\n        {\n          name: 'amountB';\n          type: 'u64';\n        },\n      ];\n    },\n    {\n      name: 'claim';\n      accounts: [\n        {\n          name: 'pool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'stakingVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'rewardAVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'rewardBVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'user';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'owner';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'rewardAAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'rewardBAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'withdrawExtraToken';\n      accounts: [\n        {\n          name: 'pool';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'stakingVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'withdrawToAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'closeUser';\n      accounts: [\n        {\n          name: 'pool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'user';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'owner';\n          isMut: true;\n          isSigner: true;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'closePool';\n      accounts: [\n        {\n          name: 'refundee';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'stakingRefundee';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'rewardARefundee';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'rewardBRefundee';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'pool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'stakingVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'rewardAVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'rewardBVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n  ];\n  accounts: [\n    {\n      name: 'pool';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'authority';\n            type: 'publicKey';\n          },\n          {\n            name: 'paused';\n            type: 'bool';\n          },\n          {\n            name: 'stakingMint';\n            type: 'publicKey';\n          },\n          {\n            name: 'stakingVault';\n            type: 'publicKey';\n          },\n          {\n            name: 'rewardAMint';\n            type: 'publicKey';\n          },\n          {\n            name: 'rewardAVault';\n            type: 'publicKey';\n          },\n          {\n            name: 'rewardBMint';\n            type: 'publicKey';\n          },\n          {\n            name: 'rewardBVault';\n            type: 'publicKey';\n          },\n          {\n            name: 'baseKey';\n            type: 'publicKey';\n          },\n          {\n            name: 'rewardDuration';\n            type: 'u64';\n          },\n          {\n            name: 'rewardDurationEnd';\n            type: 'u64';\n          },\n          {\n            name: 'lastUpdateTime';\n            type: 'u64';\n          },\n          {\n            name: 'rewardARate';\n            type: 'u64';\n          },\n          {\n            name: 'rewardBRate';\n            type: 'u64';\n          },\n          {\n            name: 'rewardAPerTokenStored';\n            type: 'u128';\n          },\n          {\n            name: 'rewardBPerTokenStored';\n            type: 'u128';\n          },\n          {\n            name: 'userStakeCount';\n            type: 'u32';\n          },\n          {\n            name: 'funders';\n            type: {\n              array: ['publicKey', 4];\n            };\n          },\n          {\n            name: 'poolBump';\n            type: 'u8';\n          },\n          {\n            name: 'totalStaked';\n            type: 'u64';\n          },\n        ];\n      };\n    },\n    {\n      name: 'user';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'pool';\n            type: 'publicKey';\n          },\n          {\n            name: 'owner';\n            type: 'publicKey';\n          },\n          {\n            name: 'rewardAPerTokenComplete';\n            type: 'u128';\n          },\n          {\n            name: 'rewardBPerTokenComplete';\n            type: 'u128';\n          },\n          {\n            name: 'rewardAPerTokenPending';\n            type: 'u64';\n          },\n          {\n            name: 'rewardBPerTokenPending';\n            type: 'u64';\n          },\n          {\n            name: 'balanceStaked';\n            type: 'u64';\n          },\n          {\n            name: 'nonce';\n            type: 'u8';\n          },\n        ];\n      };\n    },\n  ];\n  events: [\n    {\n      name: 'EventDeposit';\n      fields: [\n        {\n          name: 'amount';\n          type: 'u64';\n          index: false;\n        },\n      ];\n    },\n    {\n      name: 'EventWithdraw';\n      fields: [\n        {\n          name: 'amount';\n          type: 'u64';\n          index: false;\n        },\n      ];\n    },\n    {\n      name: 'EventFund';\n      fields: [\n        {\n          name: 'amountA';\n          type: 'u64';\n          index: false;\n        },\n        {\n          name: 'amountB';\n          type: 'u64';\n          index: false;\n        },\n      ];\n    },\n    {\n      name: 'EventClaim';\n      fields: [\n        {\n          name: 'amountA';\n          type: 'u64';\n          index: false;\n        },\n        {\n          name: 'amountB';\n          type: 'u64';\n          index: false;\n        },\n      ];\n    },\n    {\n      name: 'EventAuthorizeFunder';\n      fields: [\n        {\n          name: 'newFunder';\n          type: 'publicKey';\n          index: false;\n        },\n      ];\n    },\n    {\n      name: 'EventUnauthorizeFunder';\n      fields: [\n        {\n          name: 'funder';\n          type: 'publicKey';\n          index: false;\n        },\n      ];\n    },\n  ];\n  errors: [\n    {\n      code: 6000;\n      name: 'InsufficientFundWithdraw';\n      msg: 'Insufficient funds to withdraw.';\n    },\n    {\n      code: 6001;\n      name: 'AmountMustBeGreaterThanZero';\n      msg: 'Amount must be greater than zero.';\n    },\n    {\n      code: 6002;\n      name: 'SingleDepositTokenBCannotBeFunded';\n      msg: 'Reward B cannot be funded - pool is single deposit.';\n    },\n    {\n      code: 6003;\n      name: 'PoolPaused';\n      msg: 'Pool is paused.';\n    },\n    {\n      code: 6004;\n      name: 'DurationTooShort';\n      msg: 'Duration cannot be shorter than one day.';\n    },\n    {\n      code: 6005;\n      name: 'FunderAlreadyAuthorized';\n      msg: 'Provided funder is already authorized to fund.';\n    },\n    {\n      code: 6006;\n      name: 'MaxFunders';\n      msg: 'Maximum funders already authorized.';\n    },\n    {\n      code: 6007;\n      name: 'CannotDeauthorizePoolAuthority';\n      msg: 'Cannot deauthorize the primary pool authority.';\n    },\n    {\n      code: 6008;\n      name: 'CannotDeauthorizeMissingAuthority';\n      msg: 'Authority not found for deauthorization.';\n    },\n    {\n      code: 6009;\n      name: 'MathOverflow';\n      msg: 'Math operation overflow';\n    },\n  ];\n};\n\nexport const IDL: Farming = {\n  version: '0.2.0',\n  name: 'farming',\n  instructions: [\n    {\n      name: 'initializePool',\n      accounts: [\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'stakingMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'stakingVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'rewardAMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rewardAVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'rewardBMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rewardBVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'base',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'rewardDuration',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'createUser',\n      accounts: [\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'user',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'pause',\n      accounts: [\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'unpause',\n      accounts: [\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'deposit',\n      accounts: [\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'stakingVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'user',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'stakeFromAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'withdraw',\n      accounts: [\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'stakingVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'user',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'stakeFromAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'sptAmount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'authorizeFunder',\n      accounts: [\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'funderToAdd',\n          type: 'publicKey',\n        },\n      ],\n    },\n    {\n      name: 'deauthorizeFunder',\n      accounts: [\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'funderToRemove',\n          type: 'publicKey',\n        },\n      ],\n    },\n    {\n      name: 'fund',\n      accounts: [\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'stakingVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'rewardAVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'rewardBVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'funder',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'fromA',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'fromB',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'amountA',\n          type: 'u64',\n        },\n        {\n          name: 'amountB',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'claim',\n      accounts: [\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'stakingVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'rewardAVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'rewardBVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'user',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'rewardAAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'rewardBAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'withdrawExtraToken',\n      accounts: [\n        {\n          name: 'pool',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'stakingVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'withdrawToAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'closeUser',\n      accounts: [\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'user',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: true,\n          isSigner: true,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'closePool',\n      accounts: [\n        {\n          name: 'refundee',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'stakingRefundee',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'rewardARefundee',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'rewardBRefundee',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'stakingVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'rewardAVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'rewardBVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  accounts: [\n    {\n      name: 'pool',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'authority',\n            type: 'publicKey',\n          },\n          {\n            name: 'paused',\n            type: 'bool',\n          },\n          {\n            name: 'stakingMint',\n            type: 'publicKey',\n          },\n          {\n            name: 'stakingVault',\n            type: 'publicKey',\n          },\n          {\n            name: 'rewardAMint',\n            type: 'publicKey',\n          },\n          {\n            name: 'rewardAVault',\n            type: 'publicKey',\n          },\n          {\n            name: 'rewardBMint',\n            type: 'publicKey',\n          },\n          {\n            name: 'rewardBVault',\n            type: 'publicKey',\n          },\n          {\n            name: 'baseKey',\n            type: 'publicKey',\n          },\n          {\n            name: 'rewardDuration',\n            type: 'u64',\n          },\n          {\n            name: 'rewardDurationEnd',\n            type: 'u64',\n          },\n          {\n            name: 'lastUpdateTime',\n            type: 'u64',\n          },\n          {\n            name: 'rewardARate',\n            type: 'u64',\n          },\n          {\n            name: 'rewardBRate',\n            type: 'u64',\n          },\n          {\n            name: 'rewardAPerTokenStored',\n            type: 'u128',\n          },\n          {\n            name: 'rewardBPerTokenStored',\n            type: 'u128',\n          },\n          {\n            name: 'userStakeCount',\n            type: 'u32',\n          },\n          {\n            name: 'funders',\n            type: {\n              array: ['publicKey', 4],\n            },\n          },\n          {\n            name: 'poolBump',\n            type: 'u8',\n          },\n          {\n            name: 'totalStaked',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'user',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'pool',\n            type: 'publicKey',\n          },\n          {\n            name: 'owner',\n            type: 'publicKey',\n          },\n          {\n            name: 'rewardAPerTokenComplete',\n            type: 'u128',\n          },\n          {\n            name: 'rewardBPerTokenComplete',\n            type: 'u128',\n          },\n          {\n            name: 'rewardAPerTokenPending',\n            type: 'u64',\n          },\n          {\n            name: 'rewardBPerTokenPending',\n            type: 'u64',\n          },\n          {\n            name: 'balanceStaked',\n            type: 'u64',\n          },\n          {\n            name: 'nonce',\n            type: 'u8',\n          },\n        ],\n      },\n    },\n  ],\n  events: [\n    {\n      name: 'EventDeposit',\n      fields: [\n        {\n          name: 'amount',\n          type: 'u64',\n          index: false,\n        },\n      ],\n    },\n    {\n      name: 'EventWithdraw',\n      fields: [\n        {\n          name: 'amount',\n          type: 'u64',\n          index: false,\n        },\n      ],\n    },\n    {\n      name: 'EventFund',\n      fields: [\n        {\n          name: 'amountA',\n          type: 'u64',\n          index: false,\n        },\n        {\n          name: 'amountB',\n          type: 'u64',\n          index: false,\n        },\n      ],\n    },\n    {\n      name: 'EventClaim',\n      fields: [\n        {\n          name: 'amountA',\n          type: 'u64',\n          index: false,\n        },\n        {\n          name: 'amountB',\n          type: 'u64',\n          index: false,\n        },\n      ],\n    },\n    {\n      name: 'EventAuthorizeFunder',\n      fields: [\n        {\n          name: 'newFunder',\n          type: 'publicKey',\n          index: false,\n        },\n      ],\n    },\n    {\n      name: 'EventUnauthorizeFunder',\n      fields: [\n        {\n          name: 'funder',\n          type: 'publicKey',\n          index: false,\n        },\n      ],\n    },\n  ],\n  errors: [\n    {\n      code: 6000,\n      name: 'InsufficientFundWithdraw',\n      msg: 'Insufficient funds to withdraw.',\n    },\n    {\n      code: 6001,\n      name: 'AmountMustBeGreaterThanZero',\n      msg: 'Amount must be greater than zero.',\n    },\n    {\n      code: 6002,\n      name: 'SingleDepositTokenBCannotBeFunded',\n      msg: 'Reward B cannot be funded - pool is single deposit.',\n    },\n    {\n      code: 6003,\n      name: 'PoolPaused',\n      msg: 'Pool is paused.',\n    },\n    {\n      code: 6004,\n      name: 'DurationTooShort',\n      msg: 'Duration cannot be shorter than one day.',\n    },\n    {\n      code: 6005,\n      name: 'FunderAlreadyAuthorized',\n      msg: 'Provided funder is already authorized to fund.',\n    },\n    {\n      code: 6006,\n      name: 'MaxFunders',\n      msg: 'Maximum funders already authorized.',\n    },\n    {\n      code: 6007,\n      name: 'CannotDeauthorizePoolAuthority',\n      msg: 'Cannot deauthorize the primary pool authority.',\n    },\n    {\n      code: 6008,\n      name: 'CannotDeauthorizeMissingAuthority',\n      msg: 'Authority not found for deauthorization.',\n    },\n    {\n      code: 6009,\n      name: 'MathOverflow',\n      msg: 'Math operation overflow',\n    },\n  ],\n};\n"]}